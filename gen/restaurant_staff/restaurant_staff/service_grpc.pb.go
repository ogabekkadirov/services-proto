// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: restaurant_staff/service.proto

package restaurant_staff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StaffServiceClient is the client API for StaffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffServiceClient interface {
	RegisterManager(ctx context.Context, in *RegisterManagerRequest, opts ...grpc.CallOption) (*RegisterManagerResponse, error)
	ChangeManagerPassword(ctx context.Context, in *ChangeManagerPasswordRequest, opts ...grpc.CallOption) (*ChangeManagerPasswordResponse, error)
	LoginManager(ctx context.Context, in *LoginManagerRequest, opts ...grpc.CallOption) (*LoginManagerResponse, error)
	GetManagerProfile(ctx context.Context, in *GetManagerProfileRequest, opts ...grpc.CallOption) (*GetManagerProfileResponse, error)
	UpdateManagerProfile(ctx context.Context, in *UpdateManagerProfileRequest, opts ...grpc.CallOption) (*UpdateManagerProfileResponse, error)
	CreateManagerRestaurantAssignment(ctx context.Context, in *CreateManagerRestaurantAssignmentRequest, opts ...grpc.CallOption) (*CreateManagerRestaurantAssignmentResponse, error)
	RemoveManagerRestaurantAssignment(ctx context.Context, in *RemoveManagerRestaurantAssignmentRequest, opts ...grpc.CallOption) (*RemoveManagerRestaurantAssignmentResponse, error)
	GetManagerRestaurant(ctx context.Context, in *GetManagerRestaurantRequest, opts ...grpc.CallOption) (*GetManagerRestaurantResponse, error)
}

type staffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffServiceClient(cc grpc.ClientConnInterface) StaffServiceClient {
	return &staffServiceClient{cc}
}

func (c *staffServiceClient) RegisterManager(ctx context.Context, in *RegisterManagerRequest, opts ...grpc.CallOption) (*RegisterManagerResponse, error) {
	out := new(RegisterManagerResponse)
	err := c.cc.Invoke(ctx, "/restaurant_staff.StaffService/RegisterManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ChangeManagerPassword(ctx context.Context, in *ChangeManagerPasswordRequest, opts ...grpc.CallOption) (*ChangeManagerPasswordResponse, error) {
	out := new(ChangeManagerPasswordResponse)
	err := c.cc.Invoke(ctx, "/restaurant_staff.StaffService/ChangeManagerPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) LoginManager(ctx context.Context, in *LoginManagerRequest, opts ...grpc.CallOption) (*LoginManagerResponse, error) {
	out := new(LoginManagerResponse)
	err := c.cc.Invoke(ctx, "/restaurant_staff.StaffService/LoginManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) GetManagerProfile(ctx context.Context, in *GetManagerProfileRequest, opts ...grpc.CallOption) (*GetManagerProfileResponse, error) {
	out := new(GetManagerProfileResponse)
	err := c.cc.Invoke(ctx, "/restaurant_staff.StaffService/GetManagerProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) UpdateManagerProfile(ctx context.Context, in *UpdateManagerProfileRequest, opts ...grpc.CallOption) (*UpdateManagerProfileResponse, error) {
	out := new(UpdateManagerProfileResponse)
	err := c.cc.Invoke(ctx, "/restaurant_staff.StaffService/UpdateManagerProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) CreateManagerRestaurantAssignment(ctx context.Context, in *CreateManagerRestaurantAssignmentRequest, opts ...grpc.CallOption) (*CreateManagerRestaurantAssignmentResponse, error) {
	out := new(CreateManagerRestaurantAssignmentResponse)
	err := c.cc.Invoke(ctx, "/restaurant_staff.StaffService/CreateManagerRestaurantAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) RemoveManagerRestaurantAssignment(ctx context.Context, in *RemoveManagerRestaurantAssignmentRequest, opts ...grpc.CallOption) (*RemoveManagerRestaurantAssignmentResponse, error) {
	out := new(RemoveManagerRestaurantAssignmentResponse)
	err := c.cc.Invoke(ctx, "/restaurant_staff.StaffService/RemoveManagerRestaurantAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) GetManagerRestaurant(ctx context.Context, in *GetManagerRestaurantRequest, opts ...grpc.CallOption) (*GetManagerRestaurantResponse, error) {
	out := new(GetManagerRestaurantResponse)
	err := c.cc.Invoke(ctx, "/restaurant_staff.StaffService/GetManagerRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServiceServer is the server API for StaffService service.
// All implementations must embed UnimplementedStaffServiceServer
// for forward compatibility
type StaffServiceServer interface {
	RegisterManager(context.Context, *RegisterManagerRequest) (*RegisterManagerResponse, error)
	ChangeManagerPassword(context.Context, *ChangeManagerPasswordRequest) (*ChangeManagerPasswordResponse, error)
	LoginManager(context.Context, *LoginManagerRequest) (*LoginManagerResponse, error)
	GetManagerProfile(context.Context, *GetManagerProfileRequest) (*GetManagerProfileResponse, error)
	UpdateManagerProfile(context.Context, *UpdateManagerProfileRequest) (*UpdateManagerProfileResponse, error)
	CreateManagerRestaurantAssignment(context.Context, *CreateManagerRestaurantAssignmentRequest) (*CreateManagerRestaurantAssignmentResponse, error)
	RemoveManagerRestaurantAssignment(context.Context, *RemoveManagerRestaurantAssignmentRequest) (*RemoveManagerRestaurantAssignmentResponse, error)
	GetManagerRestaurant(context.Context, *GetManagerRestaurantRequest) (*GetManagerRestaurantResponse, error)
	mustEmbedUnimplementedStaffServiceServer()
}

// UnimplementedStaffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStaffServiceServer struct {
}

func (UnimplementedStaffServiceServer) RegisterManager(context.Context, *RegisterManagerRequest) (*RegisterManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterManager not implemented")
}
func (UnimplementedStaffServiceServer) ChangeManagerPassword(context.Context, *ChangeManagerPasswordRequest) (*ChangeManagerPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeManagerPassword not implemented")
}
func (UnimplementedStaffServiceServer) LoginManager(context.Context, *LoginManagerRequest) (*LoginManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginManager not implemented")
}
func (UnimplementedStaffServiceServer) GetManagerProfile(context.Context, *GetManagerProfileRequest) (*GetManagerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagerProfile not implemented")
}
func (UnimplementedStaffServiceServer) UpdateManagerProfile(context.Context, *UpdateManagerProfileRequest) (*UpdateManagerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManagerProfile not implemented")
}
func (UnimplementedStaffServiceServer) CreateManagerRestaurantAssignment(context.Context, *CreateManagerRestaurantAssignmentRequest) (*CreateManagerRestaurantAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManagerRestaurantAssignment not implemented")
}
func (UnimplementedStaffServiceServer) RemoveManagerRestaurantAssignment(context.Context, *RemoveManagerRestaurantAssignmentRequest) (*RemoveManagerRestaurantAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveManagerRestaurantAssignment not implemented")
}
func (UnimplementedStaffServiceServer) GetManagerRestaurant(context.Context, *GetManagerRestaurantRequest) (*GetManagerRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagerRestaurant not implemented")
}
func (UnimplementedStaffServiceServer) mustEmbedUnimplementedStaffServiceServer() {}

// UnsafeStaffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServiceServer will
// result in compilation errors.
type UnsafeStaffServiceServer interface {
	mustEmbedUnimplementedStaffServiceServer()
}

func RegisterStaffServiceServer(s grpc.ServiceRegistrar, srv StaffServiceServer) {
	s.RegisterService(&StaffService_ServiceDesc, srv)
}

func _StaffService_RegisterManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).RegisterManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_staff.StaffService/RegisterManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).RegisterManager(ctx, req.(*RegisterManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ChangeManagerPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeManagerPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ChangeManagerPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_staff.StaffService/ChangeManagerPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ChangeManagerPassword(ctx, req.(*ChangeManagerPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_LoginManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).LoginManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_staff.StaffService/LoginManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).LoginManager(ctx, req.(*LoginManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_GetManagerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetManagerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_staff.StaffService/GetManagerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetManagerProfile(ctx, req.(*GetManagerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_UpdateManagerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).UpdateManagerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_staff.StaffService/UpdateManagerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).UpdateManagerProfile(ctx, req.(*UpdateManagerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_CreateManagerRestaurantAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerRestaurantAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).CreateManagerRestaurantAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_staff.StaffService/CreateManagerRestaurantAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).CreateManagerRestaurantAssignment(ctx, req.(*CreateManagerRestaurantAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_RemoveManagerRestaurantAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveManagerRestaurantAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).RemoveManagerRestaurantAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_staff.StaffService/RemoveManagerRestaurantAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).RemoveManagerRestaurantAssignment(ctx, req.(*RemoveManagerRestaurantAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_GetManagerRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagerRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetManagerRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_staff.StaffService/GetManagerRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetManagerRestaurant(ctx, req.(*GetManagerRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StaffService_ServiceDesc is the grpc.ServiceDesc for StaffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant_staff.StaffService",
	HandlerType: (*StaffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterManager",
			Handler:    _StaffService_RegisterManager_Handler,
		},
		{
			MethodName: "ChangeManagerPassword",
			Handler:    _StaffService_ChangeManagerPassword_Handler,
		},
		{
			MethodName: "LoginManager",
			Handler:    _StaffService_LoginManager_Handler,
		},
		{
			MethodName: "GetManagerProfile",
			Handler:    _StaffService_GetManagerProfile_Handler,
		},
		{
			MethodName: "UpdateManagerProfile",
			Handler:    _StaffService_UpdateManagerProfile_Handler,
		},
		{
			MethodName: "CreateManagerRestaurantAssignment",
			Handler:    _StaffService_CreateManagerRestaurantAssignment_Handler,
		},
		{
			MethodName: "RemoveManagerRestaurantAssignment",
			Handler:    _StaffService_RemoveManagerRestaurantAssignment_Handler,
		},
		{
			MethodName: "GetManagerRestaurant",
			Handler:    _StaffService_GetManagerRestaurant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaurant_staff/service.proto",
}
