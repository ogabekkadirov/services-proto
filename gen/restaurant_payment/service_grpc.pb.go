// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package restaurant_payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RestaurantPaymentClient is the client API for RestaurantPayment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestaurantPaymentClient interface {
	UpdateMerchantSetting(ctx context.Context, in *UpdateMerchantSettingRequest, opts ...grpc.CallOption) (*UpdateMerchantSettingResponse, error)
	GetMerchantSetting(ctx context.Context, in *GetMerchantSettingRequest, opts ...grpc.CallOption) (*GetMerchantSettingResponse, error)
	// receipt
	GetReceipt(ctx context.Context, in *GetReceiptRequest, opts ...grpc.CallOption) (*GetReceiptResponse, error)
	// tx
	SaveTransaction(ctx context.Context, in *SaveTransactionRequest, opts ...grpc.CallOption) (*SaveTransactionResponse, error)
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
}

type restaurantPaymentClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantPaymentClient(cc grpc.ClientConnInterface) RestaurantPaymentClient {
	return &restaurantPaymentClient{cc}
}

func (c *restaurantPaymentClient) UpdateMerchantSetting(ctx context.Context, in *UpdateMerchantSettingRequest, opts ...grpc.CallOption) (*UpdateMerchantSettingResponse, error) {
	out := new(UpdateMerchantSettingResponse)
	err := c.cc.Invoke(ctx, "/restaurant_payment.RestaurantPayment/UpdateMerchantSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantPaymentClient) GetMerchantSetting(ctx context.Context, in *GetMerchantSettingRequest, opts ...grpc.CallOption) (*GetMerchantSettingResponse, error) {
	out := new(GetMerchantSettingResponse)
	err := c.cc.Invoke(ctx, "/restaurant_payment.RestaurantPayment/GetMerchantSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantPaymentClient) GetReceipt(ctx context.Context, in *GetReceiptRequest, opts ...grpc.CallOption) (*GetReceiptResponse, error) {
	out := new(GetReceiptResponse)
	err := c.cc.Invoke(ctx, "/restaurant_payment.RestaurantPayment/GetReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantPaymentClient) SaveTransaction(ctx context.Context, in *SaveTransactionRequest, opts ...grpc.CallOption) (*SaveTransactionResponse, error) {
	out := new(SaveTransactionResponse)
	err := c.cc.Invoke(ctx, "/restaurant_payment.RestaurantPayment/SaveTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantPaymentClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error) {
	out := new(UpdateTransactionResponse)
	err := c.cc.Invoke(ctx, "/restaurant_payment.RestaurantPayment/UpdateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantPaymentClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/restaurant_payment.RestaurantPayment/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantPaymentServer is the server API for RestaurantPayment service.
// All implementations must embed UnimplementedRestaurantPaymentServer
// for forward compatibility
type RestaurantPaymentServer interface {
	UpdateMerchantSetting(context.Context, *UpdateMerchantSettingRequest) (*UpdateMerchantSettingResponse, error)
	GetMerchantSetting(context.Context, *GetMerchantSettingRequest) (*GetMerchantSettingResponse, error)
	// receipt
	GetReceipt(context.Context, *GetReceiptRequest) (*GetReceiptResponse, error)
	// tx
	SaveTransaction(context.Context, *SaveTransactionRequest) (*SaveTransactionResponse, error)
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	mustEmbedUnimplementedRestaurantPaymentServer()
}

// UnimplementedRestaurantPaymentServer must be embedded to have forward compatible implementations.
type UnimplementedRestaurantPaymentServer struct {
}

func (UnimplementedRestaurantPaymentServer) UpdateMerchantSetting(context.Context, *UpdateMerchantSettingRequest) (*UpdateMerchantSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMerchantSetting not implemented")
}
func (UnimplementedRestaurantPaymentServer) GetMerchantSetting(context.Context, *GetMerchantSettingRequest) (*GetMerchantSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantSetting not implemented")
}
func (UnimplementedRestaurantPaymentServer) GetReceipt(context.Context, *GetReceiptRequest) (*GetReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedRestaurantPaymentServer) SaveTransaction(context.Context, *SaveTransactionRequest) (*SaveTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTransaction not implemented")
}
func (UnimplementedRestaurantPaymentServer) UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedRestaurantPaymentServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedRestaurantPaymentServer) mustEmbedUnimplementedRestaurantPaymentServer() {}

// UnsafeRestaurantPaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantPaymentServer will
// result in compilation errors.
type UnsafeRestaurantPaymentServer interface {
	mustEmbedUnimplementedRestaurantPaymentServer()
}

func RegisterRestaurantPaymentServer(s grpc.ServiceRegistrar, srv RestaurantPaymentServer) {
	s.RegisterService(&RestaurantPayment_ServiceDesc, srv)
}

func _RestaurantPayment_UpdateMerchantSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMerchantSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantPaymentServer).UpdateMerchantSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_payment.RestaurantPayment/UpdateMerchantSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantPaymentServer).UpdateMerchantSetting(ctx, req.(*UpdateMerchantSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantPayment_GetMerchantSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantPaymentServer).GetMerchantSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_payment.RestaurantPayment/GetMerchantSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantPaymentServer).GetMerchantSetting(ctx, req.(*GetMerchantSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantPayment_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantPaymentServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_payment.RestaurantPayment/GetReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantPaymentServer).GetReceipt(ctx, req.(*GetReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantPayment_SaveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantPaymentServer).SaveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_payment.RestaurantPayment/SaveTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantPaymentServer).SaveTransaction(ctx, req.(*SaveTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantPayment_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantPaymentServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_payment.RestaurantPayment/UpdateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantPaymentServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantPayment_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantPaymentServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant_payment.RestaurantPayment/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantPaymentServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestaurantPayment_ServiceDesc is the grpc.ServiceDesc for RestaurantPayment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestaurantPayment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant_payment.RestaurantPayment",
	HandlerType: (*RestaurantPaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMerchantSetting",
			Handler:    _RestaurantPayment_UpdateMerchantSetting_Handler,
		},
		{
			MethodName: "GetMerchantSetting",
			Handler:    _RestaurantPayment_GetMerchantSetting_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _RestaurantPayment_GetReceipt_Handler,
		},
		{
			MethodName: "SaveTransaction",
			Handler:    _RestaurantPayment_SaveTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _RestaurantPayment_UpdateTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _RestaurantPayment_GetTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
