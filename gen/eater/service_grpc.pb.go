// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package eater

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EaterServiceClient is the client API for EaterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EaterServiceClient interface {
	SignupEater(ctx context.Context, in *SignupEaterRequest, opts ...grpc.CallOption) (*SignupEaterResponse, error)
	ConfirmSmsCode(ctx context.Context, in *ConfirmSmsCodeRequest, opts ...grpc.CallOption) (*ConfirmSmsCodeResponse, error)
	UpdateEaterProfile(ctx context.Context, in *UpdateEaterProfileRequest, opts ...grpc.CallOption) (*UpdateEaterProfileResponse, error)
	GetEaterProfile(ctx context.Context, in *GetEaterProfileRequest, opts ...grpc.CallOption) (*GetEaterProfileResponse, error)
	// address
	AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
	DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error)
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error)
	ListAddressByEater(ctx context.Context, in *ListAddressByEaterRequest, opts ...grpc.CallOption) (*ListAddressByEaterResponse, error)
	// wallet
	AddPaymentCard(ctx context.Context, in *AddPaymentCardRequest, opts ...grpc.CallOption) (*AddPaymentCardResponse, error)
	DeletePaymentCard(ctx context.Context, in *DeletePaymentCardRequest, opts ...grpc.CallOption) (*DeletePaymentCardResponse, error)
	GetPaymentCard(ctx context.Context, in *GetPaymentCardRequest, opts ...grpc.CallOption) (*GetPaymentCardResponse, error)
	ListPaymentCardByEater(ctx context.Context, in *ListPaymentCardByEaterRequest, opts ...grpc.CallOption) (*ListPaymentCardByEaterResponse, error)
	// order
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*DeleteOrderResponse, error)
	ListOrderByEater(ctx context.Context, in *ListOrderByEaterRequest, opts ...grpc.CallOption) (*ListOrderByEaterResponse, error)
	// rating
	RateRestaurant(ctx context.Context, in *RateRestaurantRequest, opts ...grpc.CallOption) (*RateRestaurantResponse, error)
	UpdateRestaurantRating(ctx context.Context, in *UpdateRestaurantRatingRequest, opts ...grpc.CallOption) (*UpdateRestaurantRatingResponse, error)
	ListRestaurantRatingByEater(ctx context.Context, in *ListRestaurantRatingByEaterRequest, opts ...grpc.CallOption) (*ListRestaurantRatingByEaterResponse, error)
	RateDelivery(ctx context.Context, in *RateDeliveryRequest, opts ...grpc.CallOption) (*RateDeliveryResponse, error)
	UpdateDeliveryRating(ctx context.Context, in *UpdateDeliveryRatingRequest, opts ...grpc.CallOption) (*UpdateDeliveryRatingResponse, error)
	ListDeliveryRatingByEater(ctx context.Context, in *ListDeliveryRatingByEaterRequest, opts ...grpc.CallOption) (*ListDeliveryRatingByEaterResponse, error)
	GetDeliveryRatingByOrder(ctx context.Context, in *GetDeliveryRatingByOrderRequest, opts ...grpc.CallOption) (*GetDeliveryRatingByOrderResponse, error)
}

type eaterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEaterServiceClient(cc grpc.ClientConnInterface) EaterServiceClient {
	return &eaterServiceClient{cc}
}

func (c *eaterServiceClient) SignupEater(ctx context.Context, in *SignupEaterRequest, opts ...grpc.CallOption) (*SignupEaterResponse, error) {
	out := new(SignupEaterResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/SignupEater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) ConfirmSmsCode(ctx context.Context, in *ConfirmSmsCodeRequest, opts ...grpc.CallOption) (*ConfirmSmsCodeResponse, error) {
	out := new(ConfirmSmsCodeResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/ConfirmSmsCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) UpdateEaterProfile(ctx context.Context, in *UpdateEaterProfileRequest, opts ...grpc.CallOption) (*UpdateEaterProfileResponse, error) {
	out := new(UpdateEaterProfileResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/UpdateEaterProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) GetEaterProfile(ctx context.Context, in *GetEaterProfileRequest, opts ...grpc.CallOption) (*GetEaterProfileResponse, error) {
	out := new(GetEaterProfileResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/GetEaterProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error) {
	out := new(AddAddressResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/AddAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	out := new(UpdateAddressResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/UpdateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error) {
	out := new(DeleteAddressResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/DeleteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error) {
	out := new(GetAddressResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) ListAddressByEater(ctx context.Context, in *ListAddressByEaterRequest, opts ...grpc.CallOption) (*ListAddressByEaterResponse, error) {
	out := new(ListAddressByEaterResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/ListAddressByEater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) AddPaymentCard(ctx context.Context, in *AddPaymentCardRequest, opts ...grpc.CallOption) (*AddPaymentCardResponse, error) {
	out := new(AddPaymentCardResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/AddPaymentCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) DeletePaymentCard(ctx context.Context, in *DeletePaymentCardRequest, opts ...grpc.CallOption) (*DeletePaymentCardResponse, error) {
	out := new(DeletePaymentCardResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/DeletePaymentCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) GetPaymentCard(ctx context.Context, in *GetPaymentCardRequest, opts ...grpc.CallOption) (*GetPaymentCardResponse, error) {
	out := new(GetPaymentCardResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/GetPaymentCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) ListPaymentCardByEater(ctx context.Context, in *ListPaymentCardByEaterRequest, opts ...grpc.CallOption) (*ListPaymentCardByEaterResponse, error) {
	out := new(ListPaymentCardByEaterResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/ListPaymentCardByEater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error) {
	out := new(PlaceOrderResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error) {
	out := new(UpdateOrderResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*DeleteOrderResponse, error) {
	out := new(DeleteOrderResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) ListOrderByEater(ctx context.Context, in *ListOrderByEaterRequest, opts ...grpc.CallOption) (*ListOrderByEaterResponse, error) {
	out := new(ListOrderByEaterResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/ListOrderByEater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) RateRestaurant(ctx context.Context, in *RateRestaurantRequest, opts ...grpc.CallOption) (*RateRestaurantResponse, error) {
	out := new(RateRestaurantResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/RateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) UpdateRestaurantRating(ctx context.Context, in *UpdateRestaurantRatingRequest, opts ...grpc.CallOption) (*UpdateRestaurantRatingResponse, error) {
	out := new(UpdateRestaurantRatingResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/UpdateRestaurantRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) ListRestaurantRatingByEater(ctx context.Context, in *ListRestaurantRatingByEaterRequest, opts ...grpc.CallOption) (*ListRestaurantRatingByEaterResponse, error) {
	out := new(ListRestaurantRatingByEaterResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/ListRestaurantRatingByEater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) RateDelivery(ctx context.Context, in *RateDeliveryRequest, opts ...grpc.CallOption) (*RateDeliveryResponse, error) {
	out := new(RateDeliveryResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/RateDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) UpdateDeliveryRating(ctx context.Context, in *UpdateDeliveryRatingRequest, opts ...grpc.CallOption) (*UpdateDeliveryRatingResponse, error) {
	out := new(UpdateDeliveryRatingResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/UpdateDeliveryRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) ListDeliveryRatingByEater(ctx context.Context, in *ListDeliveryRatingByEaterRequest, opts ...grpc.CallOption) (*ListDeliveryRatingByEaterResponse, error) {
	out := new(ListDeliveryRatingByEaterResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/ListDeliveryRatingByEater", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eaterServiceClient) GetDeliveryRatingByOrder(ctx context.Context, in *GetDeliveryRatingByOrderRequest, opts ...grpc.CallOption) (*GetDeliveryRatingByOrderResponse, error) {
	out := new(GetDeliveryRatingByOrderResponse)
	err := c.cc.Invoke(ctx, "/eater.EaterService/GetDeliveryRatingByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EaterServiceServer is the server API for EaterService service.
// All implementations must embed UnimplementedEaterServiceServer
// for forward compatibility
type EaterServiceServer interface {
	SignupEater(context.Context, *SignupEaterRequest) (*SignupEaterResponse, error)
	ConfirmSmsCode(context.Context, *ConfirmSmsCodeRequest) (*ConfirmSmsCodeResponse, error)
	UpdateEaterProfile(context.Context, *UpdateEaterProfileRequest) (*UpdateEaterProfileResponse, error)
	GetEaterProfile(context.Context, *GetEaterProfileRequest) (*GetEaterProfileResponse, error)
	// address
	AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error)
	UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error)
	DeleteAddress(context.Context, *DeleteAddressRequest) (*DeleteAddressResponse, error)
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error)
	ListAddressByEater(context.Context, *ListAddressByEaterRequest) (*ListAddressByEaterResponse, error)
	// wallet
	AddPaymentCard(context.Context, *AddPaymentCardRequest) (*AddPaymentCardResponse, error)
	DeletePaymentCard(context.Context, *DeletePaymentCardRequest) (*DeletePaymentCardResponse, error)
	GetPaymentCard(context.Context, *GetPaymentCardRequest) (*GetPaymentCardResponse, error)
	ListPaymentCardByEater(context.Context, *ListPaymentCardByEaterRequest) (*ListPaymentCardByEaterResponse, error)
	// order
	PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	DeleteOrder(context.Context, *DeleteOrderRequest) (*DeleteOrderResponse, error)
	ListOrderByEater(context.Context, *ListOrderByEaterRequest) (*ListOrderByEaterResponse, error)
	// rating
	RateRestaurant(context.Context, *RateRestaurantRequest) (*RateRestaurantResponse, error)
	UpdateRestaurantRating(context.Context, *UpdateRestaurantRatingRequest) (*UpdateRestaurantRatingResponse, error)
	ListRestaurantRatingByEater(context.Context, *ListRestaurantRatingByEaterRequest) (*ListRestaurantRatingByEaterResponse, error)
	RateDelivery(context.Context, *RateDeliveryRequest) (*RateDeliveryResponse, error)
	UpdateDeliveryRating(context.Context, *UpdateDeliveryRatingRequest) (*UpdateDeliveryRatingResponse, error)
	ListDeliveryRatingByEater(context.Context, *ListDeliveryRatingByEaterRequest) (*ListDeliveryRatingByEaterResponse, error)
	GetDeliveryRatingByOrder(context.Context, *GetDeliveryRatingByOrderRequest) (*GetDeliveryRatingByOrderResponse, error)
	mustEmbedUnimplementedEaterServiceServer()
}

// UnimplementedEaterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEaterServiceServer struct {
}

func (UnimplementedEaterServiceServer) SignupEater(context.Context, *SignupEaterRequest) (*SignupEaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignupEater not implemented")
}
func (UnimplementedEaterServiceServer) ConfirmSmsCode(context.Context, *ConfirmSmsCodeRequest) (*ConfirmSmsCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmSmsCode not implemented")
}
func (UnimplementedEaterServiceServer) UpdateEaterProfile(context.Context, *UpdateEaterProfileRequest) (*UpdateEaterProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEaterProfile not implemented")
}
func (UnimplementedEaterServiceServer) GetEaterProfile(context.Context, *GetEaterProfileRequest) (*GetEaterProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEaterProfile not implemented")
}
func (UnimplementedEaterServiceServer) AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedEaterServiceServer) UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedEaterServiceServer) DeleteAddress(context.Context, *DeleteAddressRequest) (*DeleteAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedEaterServiceServer) GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedEaterServiceServer) ListAddressByEater(context.Context, *ListAddressByEaterRequest) (*ListAddressByEaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddressByEater not implemented")
}
func (UnimplementedEaterServiceServer) AddPaymentCard(context.Context, *AddPaymentCardRequest) (*AddPaymentCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentCard not implemented")
}
func (UnimplementedEaterServiceServer) DeletePaymentCard(context.Context, *DeletePaymentCardRequest) (*DeletePaymentCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentCard not implemented")
}
func (UnimplementedEaterServiceServer) GetPaymentCard(context.Context, *GetPaymentCardRequest) (*GetPaymentCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentCard not implemented")
}
func (UnimplementedEaterServiceServer) ListPaymentCardByEater(context.Context, *ListPaymentCardByEaterRequest) (*ListPaymentCardByEaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentCardByEater not implemented")
}
func (UnimplementedEaterServiceServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedEaterServiceServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedEaterServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedEaterServiceServer) DeleteOrder(context.Context, *DeleteOrderRequest) (*DeleteOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedEaterServiceServer) ListOrderByEater(context.Context, *ListOrderByEaterRequest) (*ListOrderByEaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderByEater not implemented")
}
func (UnimplementedEaterServiceServer) RateRestaurant(context.Context, *RateRestaurantRequest) (*RateRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateRestaurant not implemented")
}
func (UnimplementedEaterServiceServer) UpdateRestaurantRating(context.Context, *UpdateRestaurantRatingRequest) (*UpdateRestaurantRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurantRating not implemented")
}
func (UnimplementedEaterServiceServer) ListRestaurantRatingByEater(context.Context, *ListRestaurantRatingByEaterRequest) (*ListRestaurantRatingByEaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRestaurantRatingByEater not implemented")
}
func (UnimplementedEaterServiceServer) RateDelivery(context.Context, *RateDeliveryRequest) (*RateDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateDelivery not implemented")
}
func (UnimplementedEaterServiceServer) UpdateDeliveryRating(context.Context, *UpdateDeliveryRatingRequest) (*UpdateDeliveryRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeliveryRating not implemented")
}
func (UnimplementedEaterServiceServer) ListDeliveryRatingByEater(context.Context, *ListDeliveryRatingByEaterRequest) (*ListDeliveryRatingByEaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeliveryRatingByEater not implemented")
}
func (UnimplementedEaterServiceServer) GetDeliveryRatingByOrder(context.Context, *GetDeliveryRatingByOrderRequest) (*GetDeliveryRatingByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryRatingByOrder not implemented")
}
func (UnimplementedEaterServiceServer) mustEmbedUnimplementedEaterServiceServer() {}

// UnsafeEaterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EaterServiceServer will
// result in compilation errors.
type UnsafeEaterServiceServer interface {
	mustEmbedUnimplementedEaterServiceServer()
}

func RegisterEaterServiceServer(s grpc.ServiceRegistrar, srv EaterServiceServer) {
	s.RegisterService(&EaterService_ServiceDesc, srv)
}

func _EaterService_SignupEater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupEaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).SignupEater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/SignupEater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).SignupEater(ctx, req.(*SignupEaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_ConfirmSmsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmSmsCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).ConfirmSmsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/ConfirmSmsCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).ConfirmSmsCode(ctx, req.(*ConfirmSmsCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_UpdateEaterProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEaterProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).UpdateEaterProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/UpdateEaterProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).UpdateEaterProfile(ctx, req.(*UpdateEaterProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_GetEaterProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEaterProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).GetEaterProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/GetEaterProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).GetEaterProfile(ctx, req.(*GetEaterProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/AddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).AddAddress(ctx, req.(*AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/UpdateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).UpdateAddress(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).DeleteAddress(ctx, req.(*DeleteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_ListAddressByEater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressByEaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).ListAddressByEater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/ListAddressByEater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).ListAddressByEater(ctx, req.(*ListAddressByEaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_AddPaymentCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaymentCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).AddPaymentCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/AddPaymentCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).AddPaymentCard(ctx, req.(*AddPaymentCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_DeletePaymentCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaymentCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).DeletePaymentCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/DeletePaymentCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).DeletePaymentCard(ctx, req.(*DeletePaymentCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_GetPaymentCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).GetPaymentCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/GetPaymentCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).GetPaymentCard(ctx, req.(*GetPaymentCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_ListPaymentCardByEater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentCardByEaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).ListPaymentCardByEater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/ListPaymentCardByEater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).ListPaymentCardByEater(ctx, req.(*ListPaymentCardByEaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).DeleteOrder(ctx, req.(*DeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_ListOrderByEater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderByEaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).ListOrderByEater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/ListOrderByEater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).ListOrderByEater(ctx, req.(*ListOrderByEaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_RateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).RateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/RateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).RateRestaurant(ctx, req.(*RateRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_UpdateRestaurantRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRestaurantRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).UpdateRestaurantRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/UpdateRestaurantRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).UpdateRestaurantRating(ctx, req.(*UpdateRestaurantRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_ListRestaurantRatingByEater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRestaurantRatingByEaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).ListRestaurantRatingByEater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/ListRestaurantRatingByEater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).ListRestaurantRatingByEater(ctx, req.(*ListRestaurantRatingByEaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_RateDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).RateDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/RateDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).RateDelivery(ctx, req.(*RateDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_UpdateDeliveryRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeliveryRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).UpdateDeliveryRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/UpdateDeliveryRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).UpdateDeliveryRating(ctx, req.(*UpdateDeliveryRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_ListDeliveryRatingByEater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeliveryRatingByEaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).ListDeliveryRatingByEater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/ListDeliveryRatingByEater",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).ListDeliveryRatingByEater(ctx, req.(*ListDeliveryRatingByEaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EaterService_GetDeliveryRatingByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryRatingByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EaterServiceServer).GetDeliveryRatingByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eater.EaterService/GetDeliveryRatingByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EaterServiceServer).GetDeliveryRatingByOrder(ctx, req.(*GetDeliveryRatingByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EaterService_ServiceDesc is the grpc.ServiceDesc for EaterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EaterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eater.EaterService",
	HandlerType: (*EaterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignupEater",
			Handler:    _EaterService_SignupEater_Handler,
		},
		{
			MethodName: "ConfirmSmsCode",
			Handler:    _EaterService_ConfirmSmsCode_Handler,
		},
		{
			MethodName: "UpdateEaterProfile",
			Handler:    _EaterService_UpdateEaterProfile_Handler,
		},
		{
			MethodName: "GetEaterProfile",
			Handler:    _EaterService_GetEaterProfile_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _EaterService_AddAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _EaterService_UpdateAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _EaterService_DeleteAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _EaterService_GetAddress_Handler,
		},
		{
			MethodName: "ListAddressByEater",
			Handler:    _EaterService_ListAddressByEater_Handler,
		},
		{
			MethodName: "AddPaymentCard",
			Handler:    _EaterService_AddPaymentCard_Handler,
		},
		{
			MethodName: "DeletePaymentCard",
			Handler:    _EaterService_DeletePaymentCard_Handler,
		},
		{
			MethodName: "GetPaymentCard",
			Handler:    _EaterService_GetPaymentCard_Handler,
		},
		{
			MethodName: "ListPaymentCardByEater",
			Handler:    _EaterService_ListPaymentCardByEater_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _EaterService_PlaceOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _EaterService_UpdateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _EaterService_GetOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _EaterService_DeleteOrder_Handler,
		},
		{
			MethodName: "ListOrderByEater",
			Handler:    _EaterService_ListOrderByEater_Handler,
		},
		{
			MethodName: "RateRestaurant",
			Handler:    _EaterService_RateRestaurant_Handler,
		},
		{
			MethodName: "UpdateRestaurantRating",
			Handler:    _EaterService_UpdateRestaurantRating_Handler,
		},
		{
			MethodName: "ListRestaurantRatingByEater",
			Handler:    _EaterService_ListRestaurantRatingByEater_Handler,
		},
		{
			MethodName: "RateDelivery",
			Handler:    _EaterService_RateDelivery_Handler,
		},
		{
			MethodName: "UpdateDeliveryRating",
			Handler:    _EaterService_UpdateDeliveryRating_Handler,
		},
		{
			MethodName: "ListDeliveryRatingByEater",
			Handler:    _EaterService_ListDeliveryRatingByEater_Handler,
		},
		{
			MethodName: "GetDeliveryRatingByOrder",
			Handler:    _EaterService_GetDeliveryRatingByOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
